# background controls yet to be implemented for music and photos

# Functions : playTrack, shuffle, playPhotos, playMovie, musicShuffleControlFunc, musicControlFunc

import os
import time
import random
import conRecog as cr
import indepFunc as ip
from termcolor import colored
from subprocess import Popen, PIPE

# "Victoria" is often recognized as words in list below
triggerList = ["victoria","victorious","pictorial","victoriya","call victoria","pretoria","vicktoria"]

# controls available while playing the video
movieControls = ["play","stop","pause","volume up","volume down"]

shuffleControls = ["play","stop","pause","volume up","volume down","next"]

photoControls = ["play","stop","pause"]

# keypress sequences to simulate movie controls
stop_sequence = '''keydown Q
keyup Q
'''

pause_sequence = '''keydown P
keyup P
'''

volume_down_sequence = '''keydown 9
keyup 9
'''

volume_up_sequence = '''keydown 0
keyup 0
'''

#----------------------------------Music Start----------------------------------#

# play track with the give name
def playTrack(name,device):
	if(device==1):	os.chdir('/home/piyush/ied/music')
	else:	os.chdir('/home/pi/ied/music')
	
	# store file names in a python list
	with open("out.txt") as f:
		content = f.readlines()
	content = [x.strip() for x in content]

	# concatenate the extension to the track name
	name = name+".mp3"
	flag = False

	# check if the track name exists
	for i in content:
		if(i == name):
			play = i
			flag = True
			break

	# return false if track not found
	if(flag==False):
		return False
	else:
		# otherwise play the track using mplayer
		# redirect any output text generated by mplayer to null file
		# command = "mplayer "+play+" > /dev/null 2>&1"
		if(device==1):	command = "gnome-terminal --command='mplayer "+play+"'"
		else:	command = "lxterminal --command='mplayer "+play+"'"
		os.system(command)

		musicControlFunc(device)
		
		return True

# shuffle all the available sound tracks
def shuffle(device):
	try:
		if(device==1):	os.chdir('/home/piyush/ied/music')
		else:	os.chdir('/home/pi/ied/music')
		
		# store file names in a python list
		with open("out.txt") as f:
			content = f.readlines()
		content = [x.strip() for x in content]

		check = []
		
		# play random tracks from all tracks found using random set
		for i in range(len(content)):
			# print(i)
			while(1):
				r = random.randint(0,len(content)-1)
				if(r not in check):
					check.append(r)
					break
			# redirect console output to null file
			# command = "mplayer "+content[r]+" > /dev/null 2>&1"

			print colored("\nPlaying "+content[r]+"..\n",'green')

			if(device==1):	command = "gnome-terminal --command='mplayer "+content[r]+"'"
			else:	command = "lxterminal --command='mplayer "+content[r]+"'"
			
			os.system(command)

			# shift control to background music controls
			if(musicShuffleControlFunc(device)==False):	break
		
		return True

	except:
		# in case shuffle encounters some errors
		print colored("\nShuffle failed. Please try again!\n",'red')
		ip.play("Shuffle failed. Please try again!")
		return False

def musicShuffleControlFunc(device):
	musicPlaying = True
	count = 0
	# wait 10 seconds for the song to start
	time.sleep(10)

	# count==2 when mplayer stops
	while(count!=2):
		# read processes with keyword 'mplayer'
		p = os.popen("ps ux | grep mplayer","r")
		count = 0
		while(True):
			line = (p.readline()).strip()
			if not line: break
			count+=1

		print colored("\nSay 'Victoria' access music controls!\n",'green')
		audio = ip.recordAudio(device);
		
		if(cr.isConnected()): 
			if(device==1):	outText = cr.googleRecog(audio)
			else:	outText = cr.bingRecog(audio)[0]
		else: outText = cr.sphinxRecog(audio)

		if(outText==-1):
			continue
		else:
			if((outText.lower() in triggerList)or("victoria" in outText.lower())):
				if(musicPlaying==True):	ip.keypress(pause_sequence)
				musicPlaying = False
				while(1):
					print colored("\nOptions available :\n",'yellow')
					print colored(shuffleControls,'yellow')
					print("\n")

					ip.play("Which control sequence?")

					audio = ip.recordAudio(device)
					if(cr.isConnected()): outText = cr.bingRecog(audio)[0]
					else: outText = cr.sphinxRecog(audio)

					if(outText==-1):
						print colored("\nNot a control, try again!\n",'red')
						ip.play("Not a control, try again!")

					elif(outText.lower() in shuffleControls):
						text = outText.lower()
						if(text=="pause"):
							break
						elif(text=="next"):
							ip.keypress(stop_sequence)
							time.sleep(1)
							return True
						elif(text=="stop"):
							ip.keypress(stop_sequence)
							time.sleep(1)
							return False
						elif(text=="play"):
							if(musicPlaying!=True):
								ip.keypress(pause_sequence)
								musicPlaying = True
								break
							else:
								print colored("\nMusic is already playing!\n",'red')
								break
						elif(text=="volume up"):
							for i in range(3):
								ip.keypress(volume_up_sequence)
								time.sleep(1)
							if(device!=1):  ip.keypress(pause_sequence)
							musicPlaying = True
							break
						elif(text=="volume down"):
							for i in range(3):
								ip.keypress(volume_down_sequence)
								time.sleep(1)
							if(device!=1):  ip.keypress(pause_sequence)
							musicPlaying = True
							break

					elif(outText in ["exit","Exit","exact","Exact"]):
						print colored("\nExiting..\n",'red')
						ip.play("Exiting")
						ip.keypress(pause_sequence)
						musicPlaying = True
						break
	return True

def musicControlFunc(device):
	musicPlaying = True
	count = 0
	time.sleep(10)

	while(count!=2):
		p = os.popen("ps ux | grep mplayer","r")
		count = 0
		while(True):
			line = (p.readline()).strip()
			if not line: break
			count+=1

		print colored("\nSay 'Victoria' access music controls!\n",'green')
		audio = ip.recordAudio(device);
		
		if(cr.isConnected()): 
			if(device==1):	outText = cr.googleRecog(audio)
			else:	outText = cr.bingRecog(audio)[0]
		else: outText = cr.sphinxRecog(audio)

		if(outText==-1):
			continue
		else:
			if((outText.lower() in triggerList)or("victoria" in outText.lower())):
				if(musicPlaying==True):	ip.keypress(pause_sequence)
				musicPlaying = False
				
				while(1):
					print colored("\nOptions available :\n",'yellow')
					print colored(movieControls,'yellow')
					print("\n")

					ip.play("Which control sequence?")

					audio = ip.recordAudio(device)
					if(cr.isConnected()): outText = cr.bingRecog(audio)[0]
					else: outText = cr.sphinxRecog(audio)

					if(outText==-1):
						print colored("\nNot a control, try again!\n",'red')
						ip.play("Not a control, try again!")

					elif(outText.lower() in movieControls):
						text = outText.lower()
						if(text=="pause"):
							break
						elif(text=="stop"):
							ip.keypress(stop_sequence)
							time.sleep(1)
							return True
						elif(text=="play"):
							if(musicPlaying!=True):
								ip.keypress(pause_sequence)
								musicPlaying = True
								break
							else:
								print colored("\nMusic is already playing!\n",'red')
								break
						elif(text=="volume up"):
							for i in range(3):
								ip.keypress(volume_up_sequence)
								time.sleep(1)
							if(device!=1):  ip.keypress(pause_sequence)
							musicPlaying = True
							break
						elif(text=="volume down"):
							for i in range(3):
								ip.keypress(volume_down_sequence)
								time.sleep(1)
							if(device!=1):  ip.keypress(pause_sequence)
							musicPlaying = True
							break

					elif(outText in ["exit","Exit","exact","Exact"]):
						print colored("\nExiting..\n",'red')
						ip.play("Exiting")
						ip.keypress(pause_sequence)
						musicPlaying = True
						break
	return True

#----------------------------------Music End----------------------------------#

#----------------------------------Photos----------------------------------#

def playPhotos(name,device):
	if(device==1):	os.chdir('/home/piyush/ied/photos')
	else:	os.chdir('/home/pi/ied/photos')
	
	with open("out.txt") as f:
		content = f.readlines()
	content = [x.strip() for x in content]

	flag = False

	# search for album name
	for i in content:
		if(i == name):
			play = i
			flag = True
			break

	# return False and exit if album doesn't exist
	if(flag==False):
		return False
	else:
		# play using eog fullscreen/slideshow command
		command = "eog "+play+" -s"

		if(device==1):	command1 = "gnome-terminal --command='"+command+"'"
		else:	command1 = "lxterminal --command='"+command+"'"

		os.system(command1)

		photosPlaying = True
		count = 0

		# wait 5 seconds for the slideshow to startup
		time.sleep(5)

		# no. of processes with keyword 'eog' when eog not playing = 1
		while(count!=1):
			p = os.popen("ps ux | grep eog","r")
			count = 0
			while(True):
				line = (p.readline()).strip()
				if not line: break
				count+=1

			print colored("\nSay 'Victoria' access photo controls!\n",'green')
			audio = ip.recordAudio(device);
			
			if(cr.isConnected()): 
				if(device==1):	outText = cr.googleRecog(audio)
				else:	outText = cr.bingRecog(audio)[0]
			else: outText = cr.sphinxRecog(audio)

			if(outText==-1):
				continue
			else:
				if((outText.lower() in triggerList)or("victoria" in outText.lower())):
					if(photosPlaying==True):	ip.keypress(pause_sequence)
					photosPlaying = False
					ip.play("Which control sequence?")
					while(1):
						print colored("\nOptions available :\n",'yellow')
						print colored(photoControls,'yellow')
						print("\n")

						audio = ip.recordAudio(device)
						if(cr.isConnected()): outText = cr.bingRecog(audio)[0]
						else: outText = cr.sphinxRecog(audio)

						if(outText==-1):
							print colored("\nNot a control, try again!\n",'red')
							ip.play("Not a control, try again!")

						elif(outText.lower() in photoControls):
							text = outText.lower()
							if(text=="pause"):
								break
							elif(text=="stop"):
								# stop by killing using PID
								k = os.popen("ps ux | grep 'eog "+play+" -s'","r")
								k = (k.readline()).strip()
								
								# print colored("\n"+k+"\n",'yellow')
								
								pid = (k.split())[1]
								command2 = "kill -9 "+pid
								os.system(command2)

								time.sleep(2)
								return True
							elif(text=="play"):
								if(photosPlaying!=True):
									ip.keypress(pause_sequence)
									photosPlaying = True
									break
								else:
									print colored("\nAlbum is already playing!\n",'red')
									break

						elif(outText in ["exit","Exit","exact","Exact"]):
							print colored("\nExiting..\n",'red')
							ip.play("Exiting")
							ip.keypress(pause_sequence)
							photosPlaying = True
							break

		return True

#----------------------------------Photos End----------------------------------#

#----------------------------------Movies----------------------------------#

def playMovie(name,device):
	if(device==1):	os.chdir('/home/piyush/ied/movies')
	else:	os.chdir('/home/pi/ied/movies')
	
	# store file names in a python list
	with open("out.txt") as f:
		content = f.readlines()
	content = [x.strip() for x in content]

	name = str(name)

	# concatenate the extension for matching
	nameList = [name+".mkv",name+".avi",name+".mp4"]
	flag = False

	# check if movie exists
	for i in nameList:
		for j in content:
			if(i==j):
				play = i
				flag = True
				break

	# return false and exit if movie name not found
	if(flag==False):
		return False
	else:
		# play the movie using mplayer if movie is found
		mCommand = "'"+"mplayer -fs "+play+"'"
		if(device==1):	command = "gnome-terminal --command "+mCommand
		else:	command = "lxterminal --command "+mCommand
		os.system(command)

		moviePlaying = True
		count = 0
		time.sleep(10)

		while(count!=2):
			p = os.popen("ps ux | grep mplayer","r")
			count = 0
			while(True):
				line = (p.readline()).strip()
				if not line: break
				count+=1

			print colored("\nSay 'Victoria' access movie controls!\n",'green')
			audio = ip.recordAudio(device);
			
			if(cr.isConnected()): 
				if(device==1):	outText = cr.googleRecog(audio)
				else:	outText = cr.bingRecog(audio)[0]
			else: outText = cr.sphinxRecog(audio)

			if(outText==-1):
				continue
			else:
				if((outText.lower() in triggerList)or("victoria" in outText.lower())):
					if(moviePlaying==True):	ip.keypress(pause_sequence)
					moviePlaying = False
					ip.play("Which control sequence?")
					while(1):
						print colored("\nOptions available :\n",'yellow')
						print colored(movieControls,'yellow')
						print("\n")

						audio = ip.recordAudio(device)
						if(cr.isConnected()): outText = cr.bingRecog(audio)[0]
						else: outText = cr.sphinxRecog(audio)

						if(outText==-1):
							print colored("\nNot a control, try again!\n",'red')
							ip.play("Not a control, try again!")

						elif(outText.lower() in movieControls):
							text = outText.lower()
							if(text=="pause"):
								break
							elif(text=="stop"):
								ip.keypress(stop_sequence)
								time.sleep(1)
								return True
							elif(text=="play"):
								if(moviePlaying!=True):
									ip.keypress(pause_sequence)
									moviePlaying = True
									break
								else:
									print colored("\nMovie is already playing!\n",'red')
									break
							elif(text=="volume up"):
								for i in range(3):
									ip.keypress(volume_up_sequence)
									time.sleep(1)
								if(device!=1):  ip.keypress(pause_sequence)
								moviePlaying = True
								break
							elif(text=="volume down"):
								for i in range(3):
									ip.keypress(volume_down_sequence)
									time.sleep(1)
								if(device!=1):  ip.keypress(pause_sequence)
								moviePlaying = True
								break

						elif(outText in ["exit","Exit","exact","Exact"]):
							print colored("\nExiting..\n",'red')
							ip.play("Exiting")
							ip.keypress(pause_sequence)
							moviePlaying = True
							break

					
		return True

#----------------------------------Movies End----------------------------------#
